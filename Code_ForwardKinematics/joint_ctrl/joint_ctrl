#!/usr/bin/env python

# Copyright (c) 2013-2018, Rethink Robotics Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Final code for EE106A Group 1

"""
SDK Joint Position Example: keyboard
"""
import argparse
import time
import rospy
import serial
import math
import baxter_interface
import baxter_external_devices

from baxter_interface import CHECK_VERSION

###
# set_j:
# purpose: take raw data from Arduino and process it
#        : send processed data to Baxter resulting in movement
# inputs:
#     limb: left or right, we use left
#     joint_names: 1x7 array of the names of Baxter's joints
#     data: 1x9 array contains joint angles to move to
# outputs: 
#     calls limb.set_joint_position with processed data
###
def set_j(limb, joint_names, data):
	
    #ORDER IS YAW PITCH ROLL
    # data  = [IMU1, IMU2, IMU3]
    # IMU1  = [wrist_yaw, wrist_pitch, wrist_roll]
    # IMU2  = [elbow_yaw , elbow_pitch, elbow_roll]
    # IMU3  = [shoulder_yaw, shoulder_pitch, shoulder_roll]
    # We don't use elbow or shoulder yaw
    # We use the wrist yaw to control joint: left_s0

    N = 7
    joint_command = {}

    print(data)

    # Data from first IMU in degrees (wrist)
    yaw = data[0] - 150
    if yaw > 180:
        yaw -= 360

    # Code to keep Baxter from slamming into walls
    if yaw > 45:
        yaw = 45
    if yaw < -45:
        yaw = -45
    pitch = data[1]
    roll = data[2]

    # Data from second IMU in degrees (elbow)
    # yaw2 = data[3]
    pitch2 = data[4]
    roll2 = data[5]

    # Data from third IMU in degrees (shoulder)
    # yaw3 = data[6]
    pitch3 = data[7]

    if pitch3 > 0:
        pitch3 *= 1.75

    roll3 = data[8]

    # directions given in terms of user/baxter not viewer
    # yaw: with negation, pos = right, neg = left
    # pitch: with negation, pos = up, neg = down
    # roll: with negation, pos = counterclockwise, neg = clockwise
    
    # Data from first IMU in rad
    yawRad = -math.radians(yaw)
    pitchRad = -math.radians(pitch)
    rollRad = -math.radians(roll)

    # Data from second IMU in rad
    pitchRad2 = -math.radians(pitch2)
    rollRad2 = -math.radians(roll2)

    # Data from third IMU in rad
    pitchRad3 = -math.radians(pitch3)
    rollRad3 = -math.radians(roll3)

    # joint_names[0] = left_s0 = yaw             = yawRad
    # joint_names[1] = left_s1 = shoulder_pitch  = pitchRad3
    # joint_names[2] = left_e0 = shoulder_roll   = rollRad3
    # joint_names[3] = left_e1 = elbow_pitch     = pitchRad2
    # joint_names[4] = left_w0 = elbow_roll      = rollRad2
    # joint_names[5] = left_w1 = wrist_pitch     = pitchRad
    # joint_names[6] = left_w2 = wrist_roll      = rollRad

    joint_command[joint_names[6]] = rollRad
    joint_command[joint_names[5]] = pitchRad
    joint_command[joint_names[4]] = rollRad2
    joint_command[joint_names[3]] = pitchRad2
    joint_command[joint_names[2]] = rollRad3
    joint_command[joint_names[1]] = pitchRad3
    joint_command[joint_names[0]] = yawRad

    # Set the joint positions
    limb.set_joint_positions(joint_command)
    #r.sleep()

# currently unused, left in case we want to use gripper later with flex sensor
def set_g(action):
    if has_gripper:
        if action == "close":
            gripper.close()
        elif action == "open":
            gripper.open()
        elif action == "calibrate":
            gripper.calibrate()

###
# Move Baxter
# Calibrates Baxter by setting all joint angles to zero initially
# Retrieves data from Arduino
# Formats the data and sends it to set_j to be processed
###
def move_baxter():
    limb = baxter_interface.Limb('left')

    # Check for left_gripper
    #try:
    #    gripper = baxter_interface.gripper('left_gripper')
    #    print("left gripper found")
    #except Exception as e:
    #    print (e)
    #    has_gripper = False
    #    rospy.loginfo("The electric gripper, left_gripper, is not detected on the robot.")

    # Check for reference/left_gripper
    # Still unsure why sometimes the word reference occasionally prefaces joint names
    #try:
    #    gripper = baxter_interface.gripper('reference/left_gripper')
    #    print("reference left gripper found")
    #except:
    #    has_gripper = False
    #    rospy.loginfo("The electric gripper, reference/left_gripper, is not detected on the robot.")
    #else:
    #    has_gripper = True

    joints = limb.joint_names()
	
    # attempt to connect to Arduinio
    # may want to swap exit for continue
    try: 
        arduino = serial.Serial("/dev/ttyACM0", 115200)
    except:
        print("Error when getting data from Arduino")
        exit()

    # may want to swap exit for continue
    if (len(arduino.readline()) == 0):
        print ("No data from arduino")
        exit()

    done = False
    calibrate = True
    # Calibrate by setting all joint angles to zero
    N = 7
    while calibrate and not done and not rospy.is_shutdown():
        # calibrate until at least one joint_angles = 0.0
        current_angles = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        for i in range(N):
            current_angles[i] = limb.joint_angle(joints[i])
        if any(ang == 0.0 for ang in current_angles):
            calibrate = False

        data=[150.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        r = rospy.Rate(10)
        set_j(limb, joints, data)
        r.sleep()

    # set joint states using data from Arduino once calibration completed
    while not done and not rospy.is_shutdown():
        # pure data from Arduino
        # will be a string that needs to be decoded and split
        # delimiter is a space
        data1 = arduino.readline().decode("utf-8", "ignore").split(" ")

        # dummy data used for testing
        #data1 = [150.0, 0.0, 0.0, 0.0, 0.0, -30.0, 0.0, 0.0, 0.0]

        # attempt to convert string from Arduino into floats
        try:
            #print(data1)
            data = [float(i) for i in data1]
        # if float conversion fails skip this iteration   
        except:
            print(data1)
            print("Bad data, cannot be converted to float")
            continue

        # make sure Arduino received all 9 values from IMU
        # if it didn't skip this iteration as there will be 
        # index out of bounds errors
        if(len(data) < 9):
            continue
        r = rospy.Rate(10)
        set_j(limb, joints, data)

        # Stretch goal: Use flex sensor to control Baxter's gripper
        #if flex sensor closes:
        #    set_g("close")
        #if flex sensor opens:
        #    set_g("open")

        r.sleep()

def main():
    # Code is based off of : RSDK Joint Position Example: Keyboard Control
    # Lab 3 from EE106A at UC Berkeley, Fall 2018
    # main function was mostly unchanged
    epilog = """
    See help inside the example with the '?' key for key bindings.
    """

    set_offset = True

    # valid_limbs = rs.joint_names()
    # if not valid_limbs:
    #     rp.log_message(("Cannot detect any limb parameters on this robot. "
    #                     "Exiting."), "ERROR")
    #     return
    arg_fmt = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(formatter_class=arg_fmt,
                                     description=main.__doc__,
                                     epilog=epilog)
    # parser.add_argument(
    #     "-l", "--limb", dest="limb", default=valid_limbs[0],
    #     choices=valid_limbs,
    #     help="Limb on which to run the joint position keyboard example"
    # )
    args = parser.parse_args(rospy.myargv()[1:])

    print("Initializing node... ")
    rospy.init_node("sdk_joint_position_keyboard")
    print("Getting robot state... ")
    rs = baxter_interface.RobotEnable(CHECK_VERSION)
    init_state = rs.state().enabled

    def clean_shutdown():
        print("\nExiting example.")

    rospy.on_shutdown(clean_shutdown)

    rospy.loginfo("Enabling robot...")
    rs.enable()
    move_baxter()
    print("Done.")


if __name__ == '__main__':
    main()
